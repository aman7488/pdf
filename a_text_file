import React, { useState } from "react";
import {
  Box,
  Typography,
  Grid,
  CircularProgress,
  Modal,
  Paper,
  Button,
  SvgIcon,
  Divider,
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Login/AuthContext";
import DashboardTile from "../../components/DashboardTile";
import Navbar from "../../components/Navbar";
import AppContainer from "../../app-container/AppContainer";
import BorderedSection from "../../components/BorderedSection";

const allBoxes = [
  {
    title: "Self Service",
    image: "/selfService.png",
    desc: "Live",
    date: "May 2025",
    route: "/self-service",
  },
  {
    title: "FMO Trade Volume",
    image: "/db1.png",
    desc: "Live",
    date: "May 2025",
    route: "/dashboard",
  },
  {
    title: "Settlement",
    image: "/db2.jpg",
    desc: "Live",
    date: "June 2025",
    route: "/dashboard",
  },
  {
    title: "Margin Operations",
    image: "/db3.png",
    desc: "Live",
    date: "June 2025",
    route: "/dashboard",
  },
  {
    title: "Middle Office",
    image: "/db1.png",
    desc: "Live",
    date: "June 2025",
    route: "/dashboard",
  },
  {
    title: "Confirmation",
    image: "/db2.jpg",
    desc: "Live",
    date: "June 2025",
    route: "/dashboard",
  },
  {
    title: "Reg Ops Volumetric",
    image: "/db3.png",
    desc: "Live",
    date: "June 2025",
    route: "/dashboard",
  },
  {
    title: "GEMS",
    image: "/selfService.png",
    desc: "Live",
    date: "June 2025",
    route: "/dashboard",
  },
];

const Dashboard = () => {
  const navigate = useNavigate();
  const { allowedSubjects, isAuthLoading } = useAuth();

  const [modalOpen, setModalOpen] = useState(false);
  const [selectedTile, setSelectedTile] = useState(null);

  const visibleBoxes = allBoxes.filter(
    (box) => box.title === "Self Service" || allowedSubjects.includes(box.title)
  );

  const handleTileClick = (box) => {
    if (box.title === "Self Service") {
      navigate(box.route);
    } else {
      setSelectedTile(box);
      setModalOpen(true);
    }
  };

  const handleNavigate = () => {
    setModalOpen(false);
    navigate(selectedTile.route);
  };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "row",
        height: "100vh",
        backgroundColor: "#cacfd2",
      }}
    >
      <Navbar />
      <Box
        sx={{
          flexGrow: 1,
          overflowY: "auto",
          padding: "40px 0 40px 40px",
          backgroundColor: "#ffffff",
        }}
      >
        <Box
          sx={{
            display: "flex",
            justifyContent: "flex-end",
            mb: 4,
          }}
        >
          <Paper
            elevation={3}
            sx={{
              display: "flex",
              alignItems: "center",
              backgroundColor: "#ffffff",
              width: "40vw",
              borderTopLeftRadius: 10,
              borderBottomLeftRadius: 10,
            }}
          >
            <Box
              sx={{
                width: 16,
                height: 100,
                borderTopLeftRadius: 10,
                borderBottomLeftRadius: 10,
                background:
                  "linear-gradient(to bottom, #0072c6 67%, #59ba47 50%)",
              }}
            />

            <Box
              sx={{
                width: "40vw",
                height: "100%",
                background:
                  "linear-gradient(to bottom, #a9cce3 67%, #a9dfbf 50%)",
              }}
            >
              <Typography
                variant="h4"
                sx={{
                  fontWeight: 600,
                  fontFamily: "Ekster Medium",
                  color: "#111111",
                  ml: 3,
                  mt: 2,
                  mb: 1
                }}
              >
                Markets MIS Data Analytics
              </Typography>
              <Divider/>
              <Typography
                variant="subtitle1"
                sx={{
                  fontWeight: 400,
                  fontFamily: "Ekster Medium",
                  color: "#444444",
                  ml: 3,
                }}
              >
                Transforming Operations with Unified Insights
              </Typography>
            </Box>
          </Paper>
        </Box>

        {isAuthLoading ? (
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "50vh",
            }}
          >
            <CircularProgress />
          </Box>
        ) : (
          <>
            {visibleBoxes.some((box) => box.title === "Self Service") && (
              <BorderedSection title="Self Service">
                <Paper
                  elevation={2}
                  sx={{
                    display: "flex",
                    padding: 2,
                    boxShadow: 10,
                    borderRadius: 5,
                    marginBottom: 4,
                    alignItems: "center",
                  }}
                >
                  <Box sx={{ flex: "0 0 auto", marginRight: 3 }}>
                    <DashboardTile
                      title="Self Service"
                      image="/selfService.png"
                      desc="Live"
                      date="May 2025"
                      onClick={() =>
                        handleTileClick(
                          visibleBoxes.find((b) => b.title === "Self Service")
                        )
                      }
                    />
                  </Box>
                  <Box sx={{ flex: 1, justifyContent: "flex-start", ml: 5 }}>
                    <Typography
                      variant="h4"
                      fontWeight="600"
                      sx={{ fontFamily: "Ekster Medium", color: "#0473ea" }}
                      gutterBottom
                    >
                      Self Service
                    </Typography>
                    <Typography
                      variant="body1"
                      sx={{ fontFamily: "Ekster Medium" }}
                    >
                      Self Service is tool to fetch data from DQSL and visualise
                      them in Highcharts. You can customise the chart. There are
                      aggregation functions. Currently present: Count, Sum,
                      Average, Maximum, Minimum. Self Service is tool to fetch
                      data from DQSL and visualise them in Highcharts. You can
                      customise the chart. There are aggregation functions.
                      Currently present: Count, Sum, Average, Maximum, Minimum.
                    </Typography>
                  </Box>
                </Paper>
              </BorderedSection>
            )}

            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                justifyContent: "flex-start",
                boxShadow: 10,
                borderRadius: 5,
                padding: 10,
                width: "87%",
                ml: 2,
              }}
            >
              <Typography
                variant="h4"
                fontWeight="bold"
                sx={{ mb: 4, fontFamily: "Ekster Medium", color: "#0473ea" }}
              >
                Dashboards
              </Typography>
              <Grid container spacing={4}>
                {visibleBoxes
                  .filter((box) => box.title !== "Self Service")
                  .map((box, index) => (
                    <Grid item xs={12} sm={6} md={4} lg={3} key={index}>
                      <DashboardTile
                        title={box.title}
                        image={box.image}
                        desc={box.desc}
                        date={box.date}
                        onClick={() => handleTileClick(box)}
                      />
                    </Grid>
                  ))}
              </Grid>
            </Box>
          </>
        )}
      </Box>

      <Modal open={modalOpen} onClose={() => setModalOpen(false)}>
        <Box
          sx={{
            width: "90vw",
            maxHeight: "90vh",
            bgcolor: "#ffffff",
            borderRadius: 3,
            p: 3,
            mx: "auto",
            mt: "5vh",
            boxShadow: 24,
            display: "flex",
            flexDirection: "column",
            overflow: "hidden",
          }}
        >
          <Typography variant="h6" mb={2} fontWeight="bold">
            {selectedTile?.title} - Preview
          </Typography>

          <Box
            sx={{
              flexGrow: 1,
              overflowY: "auto",
              border: "1px solid #ccc",
              borderRadius: 2,
              p: 2,
              mb: 3,
              backgroundColor: "#ffffff",
              height: "65vh",
            }}
          >
            <AppContainer isPreview />
          </Box>

          <Box display="flex" justifyContent="flex-end" gap={2}>
            <Button
              variant="outlined"
              sx={{
                bgcolor: "#38d200",
                color: "#ffffff",
                fontFamily: "Ekster Medium",
              }}
              onClick={() => setModalOpen(false)}
            >
              Close
            </Button>
            <Button
              variant="contained"
              sx={{ bgcolor: "#0473ea", fontFamily: "Ekster Medium" }}
              onClick={handleNavigate}
            >
              Open in full page
            </Button>
          </Box>
        </Box>
      </Modal>
    </Box>
  );
};

export default Dashboard;












import React, { useState } from "react";
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Collapse,
  IconButton,
  Tooltip,
} from "@mui/material";
import DataExplorationIcon from "@mui/icons-material/DataExploration";
import DashboardIcon from "@mui/icons-material/Dashboard";
import ExpandLess from "@mui/icons-material/ExpandLess";
import ExpandMore from "@mui/icons-material/ExpandMore";
import BarChartIcon from "@mui/icons-material/BarChart";
import PieChartIcon from "@mui/icons-material/PieChart";
import KeyboardArrowLeftIcon from "@mui/icons-material/KeyboardArrowLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../pages/Login/AuthContext";
import LogoutIcon from "@mui/icons-material/Logout";

const allBoxes = [
  { title: "Self Service", image: "/selfService.png", route: "/self-service" },
  { title: "FMO Trade Volume", image: "/db1.png", route: "/dashboard" },
  { title: "Settlement", image: "/db2.jpg", route: "/dashboard" },
  { title: "Margin Operations", image: "/db3.png", route: "/dashboard" },
  { title: "Middle Office", image: "/db1.png", route: "/dashboard" },
  { title: "Confirmation", image: "/db2.jpg", route: "/dashboard" },
  { title: "Reg Ops Volumetric", image: "/db3.png", route: "/dashboard" },
  { title: "GEMS", image: "/selfService.png", route: "/dashboard" },
];

const Navbar = () => {
  const [openDashboards, setOpenDashboards] = useState(true);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const navigate = useNavigate();

  const handleDashboardClick = () => setOpenDashboards(!openDashboards);
  const dashboardItems = allBoxes.filter(
    (item) => item.title !== "Self Service"
  );
  const userId = sessionStorage.getItem("user_id");
  const { logout } = useAuth();

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.log(error.message);
    }
  };

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        width: isCollapsed ? "80px" : "43.5%",
        transition: "width 0.3s",
        height: "100vh",
        boxShadow: 10,
        bgcolor: "#ffffff",
        overflowY: "auto",
        position: "relative",
        scrollbarWidth: "none",
        "&::-webkit-scrollbar": {
          display: "none",
        },
      }}
    >
      <IconButton
        onClick={() => setIsCollapsed(!isCollapsed)}
        sx={{
          position: "fixed",
          top: 20,
          left: isCollapsed ? 80 : "18%",
          transform: "translateX(-50%)",
          bgcolor: "#ffffff",
          border: "1px solid #ccc",
          zIndex: 2000,
          borderRadius: "50%",
          boxShadow: 2,
          transition: "left 0.3s",
          width: "4vh",
          height: "4vh",
          "&:hover": {
            backgroundColor: "#ffffff",
          },
        }}
      >
        {isCollapsed ? <ChevronRightIcon /> : <KeyboardArrowLeftIcon />}
      </IconButton>

      <Box
        sx={{
          width: "100%",
          height: "6vh",
          margin: "5vh 0px 3vh 0",
          display: "flex",
          justifyContent: "center",
        }}
      >
        <img
          src="/STANC-logo.png"
          width={isCollapsed ? "50%" : "10%"}
          alt="logo"
        />
      </Box>

      {!isCollapsed && (
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            height: "7vh",
            width: "100%",
            bgcolor: "#0473ea",
            px: 2,
          }}
        >
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              gap: 1,
              flexDirection: isCollapsed ? "column" : "row",
            }}
          >
            <Box
              component="img"
              src="avatar.png"
              alt="User Avatar"
              sx={{
                width: "4vh",
                height: "4vh",
                borderRadius: "50%",
                objectFit: "cover",
                border: "2px solid #e0e0e0",
              }}
            />
            {!isCollapsed && (
              <Typography
                variant="h6"
                sx={{
                  fontFamily: "Ekster Medium",
                  color: "#ffffff",
                  fontSize: "2vh",
                  ml: 5,
                }}
              >
                Welcome <span style={{ color: "#38d200" }}>{userId}</span>
              </Typography>
            )}
          </Box>
        </Box>
      )}

      <List component="nav" sx={{ mt: 2 }}>
        <Tooltip
          title="Self Service"
          placement="right"
          disableHoverListener={!isCollapsed}
        >
          <ListItem
            button
            onClick={() => navigate("/self-service")}
            sx={{
              position: "relative",
              cursor: "pointer",
              "&:hover": {
                backgroundColor: "#eaf3fc",
                "&::before": {
                  content: '""',
                  position: "absolute",
                  left: 0,
                  top: 5,
                  bottom: 5,
                  width: "6px",
                  backgroundColor: "#0473ea",
                  borderTopRightRadius: "8px",
                  borderBottomRightRadius: "8px",
                },
              },
            }}
          >
            <ListItemIcon>
              <DataExplorationIcon
                sx={{ color: "#38d200", width: "3.5vh", height: "3.5vh" }}
              />
            </ListItemIcon>
            {!isCollapsed && (
              <ListItemText
                primary="Self Service"
                primaryTypographyProps={{
                  fontFamily: "Ekster Medium",
                  fontSize: "2.4vh",
                  color: "#0473ea",
                  ml: "1vw",
                  mt: "1.5vh",
                }}
              />
            )}
          </ListItem>
        </Tooltip>

        <Tooltip
          title="Dashboards"
          placement="right"
          disableHoverListener={!isCollapsed}
        >
          <ListItem
            button
            onClick={handleDashboardClick}
            sx={{
              position: "relative",
              cursor: "pointer",
              "&:hover": {
                backgroundColor: "#eaf3fc",
                "&::before": {
                  content: '""',
                  position: "absolute",
                  left: 0,
                  top: 5,
                  bottom: 5,
                  width: "6px",
                  backgroundColor: "#0473ea",
                  borderTopRightRadius: "8px",
                  borderBottomRightRadius: "8px",
                },
              },
            }}
          >
            <ListItemIcon>
              <DashboardIcon
                sx={{ color: "#38d200", width: "3.5vh", height: "3.5vh" }}
              />
            </ListItemIcon>
            {!isCollapsed && (
              <ListItemText
                primary="Dashboards"
                primaryTypographyProps={{
                  fontFamily: "Ekster Medium",
                  fontSize: "2.4vh",
                  color: "#0473ea",
                  ml: "1vw",
                  mt: "1.5vh",
                }}
              />
            )}
            {!isCollapsed && (openDashboards ? <ExpandLess /> : <ExpandMore />)}
          </ListItem>
        </Tooltip>

        <Collapse
          in={openDashboards && !isCollapsed}
          timeout="auto"
          unmountOnExit
        >
          <List component="div" disablePadding sx={{ pl: 4 }}>
            {dashboardItems.map((item, index) => (
              <ListItem
                button
                key={index}
                onClick={() =>
                  navigate(item.route, { state: { title: item.title } })
                }
                sx={{
                  position: "relative",
                  cursor: "pointer",
                  "&:hover": {
                    backgroundColor: "#eaf3fc",
                    "&::before": {
                      content: '""',
                      position: "absolute",
                      left: 0,
                      top: 5,
                      bottom: 5,
                      width: "6px",
                      backgroundColor: "#0473ea",
                      borderTopRightRadius: "8px",
                      borderBottomRightRadius: "8px",
                    },
                  },
                }}
              >
                <ListItemIcon>
                  {index % 2 === 0 ? (
                    <BarChartIcon sx={{ color: "#0473ea" }} />
                  ) : (
                    <PieChartIcon sx={{ color: "#0473ea" }} />
                  )}
                </ListItemIcon>
                <ListItemText
                  primary={item.title}
                  primaryTypographyProps={{
                    fontFamily: "Ekster Medium",
                    fontSize: "2vh",
                    color: "#6d6e70",
                  }}
                />
              </ListItem>
            ))}
          </List>
        </Collapse>
      </List>
      <Box
        sx={{
          mt: "auto",
          p: 2,
          borderTop: "1px solid #e0e0e0",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          flexDirection: isCollapsed ? "column" : "row",
          gap: 1,
        }}
      >
        <LogoutIcon
          sx={{
            fontFamily: "Ekster Medium",
            color: "#0473ea",
            cursor: "pointer",
            width: "4vh",
            height: "4vh",
            fontSize: "2vh",
            textAlign: "center",
            "&:hover": { textDecoration: "underline" },
          }}
          onClick={handleLogout}
        />
      </Box>
    </Box>
  );
};

export default Navbar;









import React, { useState, useEffect } from "react";
import { Container, Box, Typography, Button, Paper, Divider } from "@mui/material";
import DragHandleIcon from "@mui/icons-material/DragHandle";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Login/AuthContext.js";
import { SqlApiService } from "../../app-container/services/SqlApiService.js";
import CombinedNavbarDatabase from "./components/NavbarDBtreeCombo.js";
import QueryEditor from "./components/QueryEditor";
import ResultsGrid from "./components/ResultsGrid";
import axios from "axios";

const SelfService = () => {
    const [query, setQuery] = useState("");
    const [rows, setRows] = useState([]);
    const [fullRows, setFullRows] = useState([]);
    const [columns, setColumns] = useState([]);
    const [rowCount, setRowCount] = useState();
    const [error, setError] = useState("");
    const [isLoading, setIsLoading] = useState(false);
    const [dbStructure, setDbStructure] = useState([
        {
            name: "SCI",
            schemas: [
                { name: "P52LESUBPROFILE", tableColumns: [] },
                { name: "P119LMPREGULATORYINFO", tableColumns: [] },
            ],
        },
        {
            name: "CDU_LAKE",
            schemas: [
                { name: "audit_document_details_storage_uat", tableColumns: [] },
                { name: "termsheets_storage", tableColumns: [] },
            ],
        },
    ]);

    const { logout, userRole } = useAuth();
    const navigate = useNavigate();

    const [sidebarWidth, setSidebarWidth] = useState("21vw");
    const [isResizing, setIsResizing] = useState(false);

    useEffect(() => {
        const handleMouseMove = (e) => {
            if (!isResizing) return;
            const newWidth = Math.min(Math.max(e.clientX, 200), 600); // width clamp: 200-600px
            setSidebarWidth(newWidth);
        };

        const handleMouseUp = () => {
            setIsResizing(false);
        };

        window.addEventListener("mousemove", handleMouseMove);
        window.addEventListener("mouseup", handleMouseUp);

        return () => {
            window.removeEventListener("mousemove", handleMouseMove);
            window.removeEventListener("mouseup", handleMouseUp);
        };
    }, [isResizing]);

    useEffect(() => {
        const fetchColumns = async () => {
            const updatedStructure = await Promise.all(
                dbStructure.map(async (db) => {
                    const updatedSchema = await Promise.all(
                        db.schemas.map(async (schema) => {
                            try {
                                const url = `https://dqslcdpuat.uk.standardchartered.com/dqsl/query/status?table=${db.name}.${schema.name}&showFields=true`;
                                const response = await axios.get(url);
                                const fields = response?.data[0].columns || [];
                                return { ...schema, tableColumns: fields };
                            } catch (err) {
                                console.log("Failed to fetch columns");
                                return { ...schema, tableColumns: [] };
                            }
                        })
                    );
                    return { ...db, schemas: updatedSchema };
                })
            );
            setDbStructure(updatedStructure);
        };
        fetchColumns();
    }, []);

    const handleSubmit = async () => {
        try {
            setError("");
            setIsLoading(true);

            if (!query.trim()) {
                setError("SQL query cannot be empty.");
                setIsLoading(false);
                return;
            }

            const validation = SqlApiService.validateQuery(query);
            if (!validation.isValid) {
                setError(validation.error);
                setIsLoading(false);
                return;
            }

            const result = await SqlApiService.executeQuery(query);
            if (result.success) {
                setRowCount(result.data.length);
                setFullRows(result.data);
                setRows(result.data.slice(0, 100));
                setColumns(result.columns);
            } else {
                setError(result.error + " Unable to fetch data");
                setRows([]);
                setColumns([]);
            }
        } catch (err) {
            console.log("Query error: ", err);
            setError(err.message);
        } finally {
            setIsLoading(false);
        }
    };

    const handleClear = () => {
        setQuery("");
        setRows([]);
        setColumns([]);
        setError("");
    };

    const handleGenerateChart = () => {
        if (rows.length === 0 || columns.length === 0) return;
        navigate("/self-service-chart", {
            state: { rows, columns },
        });
    };

    const insertAtQuery = (insertText) => {
        const textArea = document.querySelector("textarea");
        if (!textArea) return;

        const start = textArea.selectionStart;
        const end = textArea.selectionEnd;

        const newQuery =
            query.substring(0, start) + insertText + query.substring(end);

        setQuery(newQuery);

        requestAnimationFrame(() => {
            textArea.focus();
            textArea.selectionStart = textArea.selectionEnd =
                start + insertText.length;
        });
    };

    return (
        <Box sx={{ display: "flex", height: "100vh", overflow: "hidden" }}>
            <CombinedNavbarDatabase
                dbStructure={dbStructure}
                onInsertAtQuery={insertAtQuery}
                sidebarWidth={sidebarWidth}
                setSidebarWidth={setSidebarWidth}
                isResizing={isResizing}
                setIsResizing={setIsResizing}
            />

            <Box
                onMouseDown={() => setIsResizing(true)}
                sx={{
                    width: "10px",
                    cursor: "col-resize",
                    backgroundColor: "#e0e0e0",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    "&:hover": { backgroundColor: "#c0c0c0" },
                }}
                title="Drag to resize"
            >
                <DragHandleIcon
                    sx={{
                        fontSize: "1.2rem",
                        color: "#888",
                        transform: "rotate(90deg)",
                        pointerEvents: "none",
                    }}
                />
            </Box>

            {/* Query Editor and Results */}
            <Box
                sx={{
                    flex: 1,
                    display: "flex",
                    flexDirection: "column",
                    overflow: "hidden",
                    overflowY: "auto",
                    p: 3,
                    backgroundColor: "#f9f9f9",
                }}
            >
                <Box
                    sx={{
                        // px: 3,
                        pb: 2,
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        borderBottom: "1px solid #ccc",
                        backgroundColor: "#f9f9f9",
                    }}
                >
                    <Typography variant="h4" sx={{ fontWeight: "bold", color: "#0473ea", px: 3 }}>
                        Self Service
                    </Typography>

                    <Box
                        sx={{
                            display: "flex",
                            justifyContent: "flex-end",
                            mb: 1,
                        }}
                    >
                        <Paper
                            elevation={3}
                            sx={{
                                display: "flex",
                                alignItems: "center",
                                backgroundColor: "#ffffff",
                                width: "40vw",
                                borderTopLeftRadius: 10,
                                borderBottomLeftRadius: 10,
                            }}
                        >
                            <Box
                                sx={{
                                    width: 16,
                                    height: 100,
                                    borderTopLeftRadius: 10,
                                    borderBottomLeftRadius: 10,
                                    background:
                                        "linear-gradient(to bottom, #0072c6 67%, #59ba47 50%)",
                                }}
                            />

                            <Box
                                sx={{
                                    width: "40vw",
                                    height: "100%",
                                    background:
                                        "linear-gradient(to bottom, #a9cce3 67%, #a9dfbf 50%)",
                                }}
                            >
                                <Typography
                                    variant="h4"
                                    sx={{
                                        fontWeight: 600,
                                        fontFamily: "Ekster Medium",
                                        color: "#111111",
                                        ml: 3,
                                        mt: 2,
                                        mb: 1
                                    }}
                                >
                                    Markets MIS Data Analytics
                                </Typography>
                                <Divider />
                                <Typography
                                    variant="subtitle1"
                                    sx={{
                                        fontWeight: 400,
                                        fontFamily: "Ekster Medium",
                                        color: "#444444",
                                        ml: 3,
                                    }}
                                >
                                    Transforming Operations with Unified Insights
                                </Typography>
                            </Box>
                        </Paper>
                    </Box>
                </Box>

                <QueryEditor
                    query={query}
                    setQuery={setQuery}
                    onSubmit={handleSubmit}
                    onClear={handleClear}
                    isLoading={isLoading}
                    error={error}
                />

                <ResultsGrid
                    rows={rows}
                    fullRows={fullRows}
                    columns={columns}
                    rowCount={rowCount}
                    isLoading={isLoading}
                    error={error}
                    userRole={userRole}
                    onGenerateChart={handleGenerateChart}
                />
            </Box>
        </Box>
    );
};

export default SelfService;






















import React, { useState, useEffect } from "react";
import {
    Box,
    Typography,
    List,
    ListItem,
    ListItemText,
    ListItemIcon,
    Collapse,
    IconButton,
    Tooltip,
    TextField,
    InputAdornment,
    Accordion,
    AccordionSummary,
    AccordionDetails,
} from "@mui/material";
import DashboardIcon from "@mui/icons-material/Dashboard";
import HomeIcon from "@mui/icons-material/Home";
import ExpandLess from "@mui/icons-material/ExpandLess";
import ExpandMore from "@mui/icons-material/ExpandMore";
import BarChartIcon from "@mui/icons-material/BarChart";
import PieChartIcon from "@mui/icons-material/PieChart";
import KeyboardArrowLeftIcon from "@mui/icons-material/KeyboardArrowLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import SearchIcon from "@mui/icons-material/Search";
import StorageIcon from "@mui/icons-material/Storage";
import SchemaIcon from "@mui/icons-material/Schema";
import AbcIcon from "@mui/icons-material/Abc";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../Login/AuthContext";
import LogoutIcon from "@mui/icons-material/Logout";

const allBoxes = [
    { title: "FMO Trade Volume", image: "/db1.png", route: "/dashboard" },
    { title: "Settlement", image: "/db2.jpg", route: "/dashboard" },
    { title: "Margin Operations", image: "/db3.png", route: "/dashboard" },
    { title: "Middle Office", image: "/db1.png", route: "/dashboard" },
    { title: "Confirmation", image: "/db2.jpg", route: "/dashboard" },
    { title: "Reg Ops Volumetric", image: "/db3.png", route: "/dashboard" },
    { title: "GEMS", image: "/selfService.png", route: "/dashboard" },
];

const CombinedNavbarDatabase = ({
    dbStructure,
    onInsertAtQuery,
    sidebarWidth,
    setSidebarWidth,
    isResizing,
    setIsResizing
}) => {
    const [openDashboards, setOpenDashboards] = useState(false);
    const [openDatabases, setOpenDatabases] = useState(true);
    const [isCollapsed, setIsCollapsed] = useState(false);
    const [searchTerm, setSearchTerm] = useState("");
    const [expandedDBs, setExpandedDBs] = useState(new Set());
    const [expandedSchemas, setExpandedSchemas] = useState(new Set());

    const navigate = useNavigate();
    const userId = sessionStorage.getItem("user_id");
    const { logout } = useAuth();

    const colors = {
        primary: "#0473ea",
        secondary: "#38d200",
        background: "#ffffff",
        surface: "#f8faff",
        surfaceVariant: "#eaf3fc",
        onSurface: "#1a1a1a",
        onSurfaceVariant: "#6d6e70",
        border: "#e0e0e0",
        shadow: "rgba(0, 0, 0, 0.1)",
        hover: "#f5f5f5",
        accent: "#8e44ad",
        success: "#27ae60",
        info: "#2e86c1",
    };

    const ellipsisText = {
        flex: 1,
        minWidth: 0,
        whiteSpace: "nowrap",
        overflow: "hidden",
        textOverflow: "ellipsis",
    };

    const getSchemaKey = (dbIndex, schemaIndex) => `${dbIndex}-${schemaIndex}`;

    const handleDashboardClick = () => setOpenDashboards(!openDashboards);
    const dashboardItems = allBoxes;

    const handleLogout = async () => {
        try {
            await logout();
        } catch (error) {
            console.log(error.message);
        }
    };

    const handleToggleDB = (dbIndex) => {
        setExpandedDBs((prev) => {
            const newSet = new Set(prev);
            newSet.has(dbIndex) ? newSet.delete(dbIndex) : newSet.add(dbIndex);
            return newSet;
        });
    };

    const handleToggleSchema = (dbIndex, schemaIndex) => {
        const key = getSchemaKey(dbIndex, schemaIndex);
        setExpandedSchemas((prev) => {
            const newSet = new Set(prev);
            newSet.has(key) ? newSet.delete(key) : newSet.add(key);
            return newSet;
        });
    };

    useEffect(() => {
        if (!searchTerm) {
            setExpandedDBs(new Set());
            setExpandedSchemas(new Set());
            return;
        }

        const dbs = new Set();
        const schemas = new Set();

        dbStructure.forEach((db, dbIndex) => {
            const dbMatch = db.name.toLowerCase().includes(searchTerm.toLowerCase());

            db.schemas.forEach((schema, schemaIndex) => {
                const schemaMatch = schema.name
                    .toLowerCase()
                    .includes(searchTerm.toLowerCase());
                const tableMatch = schema.tableColumns.some((table) =>
                    table.toLowerCase().includes(searchTerm.toLowerCase())
                );

                if (schemaMatch || tableMatch) {
                    schemas.add(getSchemaKey(dbIndex, schemaIndex));
                }
            });

            if (
                dbMatch ||
                [...schemas].some((key) => key.startsWith(`${dbIndex}-`))
            ) {
                dbs.add(dbIndex);
            }
        });

        setExpandedDBs(dbs);
        setExpandedSchemas(schemas);
    }, [searchTerm, dbStructure]);

    return (
        <Box
            sx={{
                display: "flex",
                flexDirection: "column",
                width: isCollapsed ? "80px" : sidebarWidth,
                transition: "width 0.3s ease",
                height: "100vh",
                boxShadow: `0 4px 12px ${colors.shadow}`,
                bgcolor: colors.background,
                position: "relative",
            }}
        >
            <IconButton
                onClick={() => setIsCollapsed(!isCollapsed)}
                sx={{
                    position: "absolute",
                    top: 20,
                    right: -20,
                    bgcolor: colors.background,
                    border: `1px solid ${colors.border}`,
                    zIndex: 2000,
                    borderRadius: "50%",
                    boxShadow: `0 2px 8px ${colors.shadow}`,
                    width: "40px",
                    height: "40px",
                    "&:hover": {
                        backgroundColor: colors.hover,
                    },
                }}
            >
                {isCollapsed ? <ChevronRightIcon /> : <KeyboardArrowLeftIcon />}
            </IconButton>

            {/* Scrollable content below */}
            <Box
                sx={{
                    height: "100vh",
                    flex: 1,
                    overflowY: "auto",
                    overflowX: "hidden",
                    scrollbarWidth: "thin",
                    scrollbarColor: `${colors.border} transparent`,
                    pb: 8,
                    "&::-webkit-scrollbar": {
                        width: "6px",
                    },
                    "&::-webkit-scrollbar-track": {
                        background: "transparent",
                    },
                    "&::-webkit-scrollbar-thumb": {
                        backgroundColor: colors.border,
                        borderRadius: "3px",
                        "&:hover": {
                            backgroundColor: colors.onSurfaceVariant,
                        },
                    },
                }}
            >
                <Box
                    sx={{
                        width: "100%",
                        height: "6vh",
                        minHeight: "60px",
                        margin: "5vh 0px 3vh 0",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                    }}
                >
                    <img
                        src="/STANC-logo.png"
                        width={isCollapsed ? "50%" : "60%"}
                        alt="logo"
                        style={{ maxHeight: "50px", objectFit: "contain" }}
                    />
                </Box>

                {!isCollapsed && (
                    <Box
                        sx={{
                            display: "flex",
                            alignItems: "center",
                            minHeight: "7vh",
                            width: "100%",
                            bgcolor: colors.primary,
                            px: 2,
                            py: 1,
                            mx: 0,
                        }}
                    >
                        <Box
                            sx={{
                                display: "flex",
                                alignItems: "center",
                                gap: 1,
                                width: "100%",
                            }}
                        >
                            <Box
                                component="img"
                                src="avatar.png"
                                alt="User Avatar"
                                sx={{
                                    width: "4vh",
                                    height: "4vh",
                                    minWidth: "32px",
                                    minHeight: "32px",
                                    borderRadius: "50%",
                                    objectFit: "cover",
                                    border: `2px solid ${colors.border}`,
                                }}
                            />
                            <Typography
                                variant="h6"
                                sx={{
                                    fontFamily: "Ekster Medium",
                                    color: colors.background,
                                    fontSize: "3vh",
                                    minFontSize: "14px",
                                    ml: 1,
                                    ...ellipsisText,
                                }}
                            >
                                Welcome <span style={{ color: colors.secondary }}>{userId}</span>
                            </Typography>
                        </Box>
                    </Box>
                )}

                <Box sx={{ mt: 2 }}>
                    <List component="nav">
                        <Tooltip
                            title="Dashboards"
                            placement="right"
                            disableHoverListener={!isCollapsed}
                        >
                            <ListItem
                                button
                                onClick={handleDashboardClick}
                                sx={{
                                    position: "relative",
                                    cursor: "pointer",
                                    "&:hover": {
                                        backgroundColor: colors.surfaceVariant,
                                        "&::before": {
                                            content: '""',
                                            position: "absolute",
                                            left: 0,
                                            top: 5,
                                            bottom: 5,
                                            width: "6px",
                                            backgroundColor: colors.primary,
                                            borderTopRightRadius: "8px",
                                            borderBottomRightRadius: "8px",
                                        },
                                    },
                                }}
                            >
                                <ListItemIcon>
                                    <DashboardIcon
                                        sx={{
                                            color: colors.secondary,
                                            width: "3.5vh",
                                            height: "3.5vh",
                                            minWidth: "24px",
                                            minHeight: "24px",
                                        }}
                                    />
                                </ListItemIcon>
                                {!isCollapsed && (
                                    <ListItemText
                                        primary="Dashboards"
                                        primaryTypographyProps={{
                                            fontFamily: "Ekster Medium",
                                            fontSize: "2.4vh",
                                            minFontSize: "16px",
                                            color: colors.primary,
                                            ml: "1vw",
                                        }}
                                    />
                                )}
                                {!isCollapsed && (
                                    <Box sx={{ color: colors.primary }}>
                                        {openDashboards ? <ExpandLess /> : <ExpandMore />}
                                    </Box>
                                )}
                            </ListItem>
                        </Tooltip>

                        <Collapse
                            in={openDashboards && !isCollapsed}
                            timeout="auto"
                            unmountOnExit
                        >
                            <List component="div" disablePadding sx={{ pl: 4 }}>
                                {dashboardItems.map((item, index) => (
                                    <ListItem
                                        button
                                        key={index}
                                        onClick={() =>
                                            navigate(item.route, { state: { title: item.title } })
                                        }
                                        sx={{
                                            position: "relative",
                                            cursor: "pointer",
                                            "&:hover": {
                                                backgroundColor: colors.surfaceVariant,
                                                "&::before": {
                                                    content: '""',
                                                    position: "absolute",
                                                    left: 0,
                                                    top: 5,
                                                    bottom: 5,
                                                    width: "6px",
                                                    backgroundColor: colors.primary,
                                                    borderTopRightRadius: "8px",
                                                    borderBottomRightRadius: "8px",
                                                },
                                            },
                                        }}
                                    >
                                        <ListItemIcon>
                                            {index % 2 === 0 ? (
                                                <BarChartIcon sx={{ color: colors.primary }} />
                                            ) : (
                                                <PieChartIcon sx={{ color: colors.primary }} />
                                            )}
                                        </ListItemIcon>
                                        <ListItemText
                                            primary={item.title}
                                            primaryTypographyProps={{
                                                fontFamily: "Ekster Medium",
                                                fontSize: "2vh",
                                                minFontSize: "14px",
                                                color: colors.onSurfaceVariant,
                                            }}
                                        />
                                    </ListItem>
                                ))}
                            </List>
                        </Collapse>

                        <Tooltip
                            title="Databases"
                            placement="right"
                            disableHoverListener={!isCollapsed}
                        >
                            <ListItem
                                button
                                onClick={() => setOpenDatabases(!openDatabases)}
                                sx={{
                                    position: "relative",
                                    cursor: "pointer",
                                    "&:hover": {
                                        backgroundColor: colors.surfaceVariant,
                                        "&::before": {
                                            content: '""',
                                            position: "absolute",
                                            left: 0,
                                            top: 5,
                                            bottom: 5,
                                            width: "6px",
                                            backgroundColor: colors.primary,
                                            borderTopRightRadius: "8px",
                                            borderBottomRightRadius: "8px",
                                        },
                                    },
                                }}
                            >
                                <ListItemIcon>
                                    <StorageIcon sx={{
                                        color: colors.secondary,
                                        width: "3.5vh",
                                        height: "3.5vh",
                                        minWidth: "24px",
                                        minHeight: "24px",
                                    }} />
                                </ListItemIcon>
                                {!isCollapsed && (
                                    <ListItemText
                                        primary="Databases"
                                        primaryTypographyProps={{
                                            fontFamily: "Ekster Medium",
                                            fontSize: "2.4vh",
                                            minFontSize: "16px",
                                            color: colors.primary,
                                            ml: "1vw",
                                        }}
                                    />
                                )}
                                {!isCollapsed && (
                                    <Box sx={{ color: colors.primary }}>
                                        {openDatabases ? <ExpandLess /> : <ExpandMore />}
                                    </Box>
                                )}
                            </ListItem>
                        </Tooltip>

                        <Collapse in={openDatabases && !isCollapsed} timeout="auto" unmountOnExit>
                            <Box
                                sx={{
                                    p: 2,
                                    borderRadius: 2,
                                    backgroundColor: colors.surface,
                                    mb: 2,
                                    mx: 2,
                                }}
                            >
                                <TextField
                                    fullWidth
                                    variant="outlined"
                                    size="small"
                                    placeholder="Search DB, Schema, Table..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    InputProps={{
                                        sx: {
                                            borderRadius: 2,
                                            backgroundColor: colors.background,
                                            fontFamily: "inherit",
                                            "& .MuiOutlinedInput-notchedOutline": {
                                                borderColor: colors.border,
                                            },
                                            "&:hover .MuiOutlinedInput-notchedOutline": {
                                                borderColor: colors.primary,
                                            },
                                            "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                                                borderColor: colors.primary,
                                            },
                                        },
                                        startAdornment: (
                                            <InputAdornment position="start">
                                                <SearchIcon sx={{ color: colors.onSurfaceVariant }} />
                                            </InputAdornment>
                                        ),
                                    }}
                                />
                            </Box>

                            <Box sx={{ mx: 2, mb: 2 }}>
                                {dbStructure?.map((db, dbIndex) => {
                                    const isDBExpanded = expandedDBs.has(dbIndex);

                                    return (
                                        <Accordion
                                            key={dbIndex}
                                            expanded={isDBExpanded}
                                            onChange={() => handleToggleDB(dbIndex)}
                                            sx={{
                                                borderRadius: 2,
                                                backgroundColor: colors.surface,
                                                mb: 1,
                                                "&:before": { display: "none" },
                                                boxShadow: `0 1px 3px ${colors.shadow}`,
                                                width: '100%',
                                                maxWidth: '100%',
                                                "& .MuiAccordionSummary-root": {
                                                    "&:hover": {
                                                        backgroundColor: colors.surfaceVariant,
                                                    },
                                                },
                                                "& .MuiAccordionSummary-expandIconWrapper": {
                                                    color: colors.primary,
                                                },
                                            }}
                                        >
                                            <AccordionSummary expandIcon={<ExpandMore />}>
                                                <Box sx={{ display: "flex", gap: 2, alignItems: "center", width: "100%" }}>
                                                    <SchemaIcon sx={{ color: colors.accent, flexShrink: 0 }} />
                                                    <Tooltip title = {db.name}>
                                                    <Typography
                                                        draggable
                                                        onDragStart={(e) =>
                                                            e.dataTransfer.setData("text/plain", db.name)
                                                        }
                                                        onDoubleClick={() => onInsertAtQuery(db.name)}
                                                        sx={{
                                                            fontWeight: 500,
                                                            cursor: "grab",
                                                            fontFamily: "inherit",
                                                            color: colors.onSurface,
                                                            "&:hover": {
                                                                textDecoration: "underline",
                                                                color: colors.primary,
                                                            },
                                                            ...ellipsisText,
                                                        }}
                                                    >
                                                        {db.name}
                                                    </Typography>
                                                    </Tooltip>
                                                </Box>
                                            </AccordionSummary>

                                            <AccordionDetails>
                                                {db?.schemas?.map((schema, schemaIndex) => {
                                                    const schemaKey = getSchemaKey(dbIndex, schemaIndex);
                                                    const isSchemaExpanded = expandedSchemas.has(schemaKey);

                                                    return (
                                                        <Accordion
                                                            key={schemaKey}
                                                            expanded={isSchemaExpanded}
                                                            onChange={() => handleToggleSchema(dbIndex, schemaIndex)}
                                                            sx={{
                                                                ml: 2,
                                                                borderRadius: 2,
                                                                backgroundColor: colors.background,
                                                                boxShadow: `inset 0 0 0 1px ${colors.border}`,
                                                                mb: 1,
                                                                "&:before": { display: "none" },
                                                                "& .MuiAccordionSummary-root": {
                                                                    "&:hover": {
                                                                        backgroundColor: colors.hover,
                                                                    },
                                                                },
                                                                "& .MuiAccordionSummary-expandIconWrapper": {
                                                                    color: colors.primary,
                                                                },
                                                            }}
                                                        >
                                                            <AccordionSummary expandIcon={<ExpandMore />}>
                                                                <Box sx={{ display: "flex", gap: 2, alignItems: "center" }}>
                                                                    <StorageIcon sx={{ color: colors.success }} />
                                                                    <Tooltip title={schema.name}>
                                                                        <Typography
                                                                            draggable
                                                                            onDragStart={(e) =>
                                                                                e.dataTransfer.setData(
                                                                                    "text/plain",
                                                                                    `${db.name}.${schema.name}`
                                                                                )
                                                                            }
                                                                            onDoubleClick={() =>
                                                                                onInsertAtQuery(`${db.name}.${schema.name}`)
                                                                            }
                                                                            sx={{
                                                                                cursor: "grab",
                                                                                fontFamily: "inherit",
                                                                                color: colors.onSurface,
                                                                                "&:hover": {
                                                                                    textDecoration: "underline",
                                                                                    color: colors.primary,
                                                                                },
                                                                                ...ellipsisText,
                                                                            }}
                                                                        >
                                                                            {schema.name}
                                                                        </Typography>
                                                                    </Tooltip>
                                                                </Box>
                                                            </AccordionSummary>

                                                            <AccordionDetails>
                                                                {schema?.tableColumns?.map((table, tableIndex) => (
                                                                    <Box key={tableIndex}>
                                                                        <Box
                                                                            sx={{
                                                                                display: "flex",
                                                                                alignItems: "center",
                                                                                gap: 2,
                                                                                ml: 4,
                                                                                my: 0.5,
                                                                                py: 0.5,
                                                                                px: 1,
                                                                                borderRadius: 1,
                                                                                "&:hover": {
                                                                                    backgroundColor: colors.hover,
                                                                                },
                                                                            }}
                                                                        >
                                                                            <AbcIcon sx={{ color: colors.info, fontSize: 20 }} />
                                                                            <Tooltip title={table}>
                                                                                <Typography
                                                                                    draggable
                                                                                    onDragStart={(e) =>
                                                                                        e.dataTransfer.setData(
                                                                                            "text/plain",
                                                                                            `${db.name}.${schema.name}.${table}`
                                                                                        )
                                                                                    }
                                                                                    onDoubleClick={() =>
                                                                                        onInsertAtQuery(
                                                                                            `${db.name}.${schema.name}.${table}`
                                                                                        )
                                                                                    }
                                                                                    sx={{
                                                                                        cursor: "grab",
                                                                                        fontFamily: "inherit",
                                                                                        color: colors.onSurface,
                                                                                        "&:hover": {
                                                                                            textDecoration: "underline",
                                                                                            color: colors.primary,
                                                                                        },
                                                                                        ...ellipsisText,
                                                                                    }}
                                                                                >
                                                                                    {table}
                                                                                </Typography>
                                                                            </Tooltip>
                                                                        </Box>
                                                                    </Box>
                                                                ))}
                                                            </AccordionDetails>
                                                        </Accordion>
                                                    );
                                                })}
                                            </AccordionDetails>
                                        </Accordion>
                                    );
                                })}
                            </Box>
                        </Collapse>
                    </List>
                </Box>
            </Box>

            {/* Footer */}
            <Box
                sx={{
                    p: 2,
                    borderTop: `1px solid ${colors.border}`,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "space-between",
                    position: "sticky",
                    bottom: 0,
                    backgroundColor: colors.background,
                    zIndex: 1000,
                    mt: "auto",
                }}
            >
                <Tooltip title="Home" placement="right" disableHoverListener={!isCollapsed}>
                    <IconButton
                        onClick={() => navigate("/")}
                        sx={{
                            ml: "20%",
                            color: colors.primary,
                            "&:hover": {
                                color: "#035ec2",
                                backgroundColor: colors.hover,
                            },
                        }}
                    >
                        <HomeIcon
                            sx={{
                                width: "4vh",
                                height: "4vh",
                                minWidth: "24px",
                                minHeight: "24px",
                            }}
                        />
                    </IconButton>
                </Tooltip>
                <Tooltip title="Logout" placement="right" disableHoverListener={!isCollapsed}>
                    <IconButton
                        onClick={handleLogout}
                        sx={{
                            mr: "20%",
                            color: colors.primary,
                            "&:hover": {
                                color: "#035ec2",
                                backgroundColor: colors.hover,
                            },
                        }}
                    >
                        <LogoutIcon
                            sx={{
                                width: "4vh",
                                height: "4vh",
                                minWidth: "24px",
                                minHeight: "24px",
                            }}
                        />
                    </IconButton>
                </Tooltip>
            </Box>
        </Box>
    );
};

export default CombinedNavbarDatabase;

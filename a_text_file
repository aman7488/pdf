import React, { useState, useEffect } from "react";
import {
  Typography,
  Box,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  TextField,
  Tooltip,
  InputAdornment,
} from "@mui/material";
import { ExpandMore } from "@mui/icons-material";
import SearchIcon from "@mui/icons-material/Search";
import StorageIcon from "@mui/icons-material/Storage";
import SchemaIcon from "@mui/icons-material/Schema";
import AbcIcon from "@mui/icons-material/Abc";

const DatabaseTree = ({ dbStructure, onInsertAtQuery }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedDBs, setExpandedDBs] = useState(new Set());
  const [expandedSchemas, setExpandedSchemas] = useState(new Set());

  const ellipsisText = {
    maxWidth: "140px",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    display: "inline-block",
  };

  const getSchemaKey = (dbIndex, schemaIndex) => `${dbIndex}-${schemaIndex}`;

  const handleToggleDB = (dbIndex) => {
    setExpandedDBs((prev) => {
      const newSet = new Set(prev);
      newSet.has(dbIndex) ? newSet.delete(dbIndex) : newSet.add(dbIndex);
      return newSet;
    });
  };

  const handleToggleSchema = (dbIndex, schemaIndex) => {
    const key = getSchemaKey(dbIndex, schemaIndex);
    setExpandedSchemas((prev) => {
      const newSet = new Set(prev);
      newSet.has(key) ? newSet.delete(key) : newSet.add(key);
      return newSet;
    });
  };

  useEffect(() => {
    if (!searchTerm) {
      setExpandedDBs(new Set());
      setExpandedSchemas(new Set());
      return;
    }

    const dbs = new Set();
    const schemas = new Set();

    dbStructure.forEach((db, dbIndex) => {
      const dbMatch = db.name.toLowerCase().includes(searchTerm.toLowerCase());

      db.schemas.forEach((schema, schemaIndex) => {
        const schemaMatch = schema.name
          .toLowerCase()
          .includes(searchTerm.toLowerCase());
        const tableMatch = schema.tableColumns.some((table) =>
          table.toLowerCase().includes(searchTerm.toLowerCase())
        );

        if (schemaMatch || tableMatch) {
          schemas.add(getSchemaKey(dbIndex, schemaIndex));
        }
      });

      if (
        dbMatch ||
        [...schemas].some((key) => key.startsWith(`${dbIndex}-`))
      ) {
        dbs.add(dbIndex);
      }
    });

    setExpandedDBs(dbs);
    setExpandedSchemas(schemas);
  }, [searchTerm, dbStructure]);

  return (
    <Box
      sx={{
        boxShadow: 3,
        borderRadius: 3,
        p: 3,
        backgroundColor: "#fff",
        maxHeight: "80vh",
        overflowY: "auto",
      }}
    >
      <Typography
        variant="h5"
        sx={{
          fontWeight: "bold",
          color: "#1a1a1a",
          fontFamily: "Ekarta Medium, sans-serif",
          mb: 2,
        }}
      >
        Database Browser
      </Typography>

      <TextField
        fullWidth
        variant="outlined"
        size="small"
        placeholder="Search DB, Schema, Table..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        InputProps={{
          sx: {
            borderRadius: 2,
            backgroundColor: "#f9f9f9",
            fontFamily: "inherit",
          },
          startAdornment: (
            <InputAdornment position="start">
              <SearchIcon sx={{ color: "#757575" }} />
            </InputAdornment>
          ),
        }}
        sx={{ mb: 2 }}
      />

      {dbStructure?.map((db, dbIndex) => {
        const isDBExpanded = expandedDBs.has(dbIndex);

        return (
          <Accordion
            key={dbIndex}
            expanded={isDBExpanded}
            onChange={() => handleToggleDB(dbIndex)}
            sx={{
              borderRadius: 2,
              backgroundColor: "#f8faff",
              mb: 1,
              "&:before": { display: "none" },
              "& .MuiAccordionSummary-root:hover": {
                backgroundColor: "#eaf4fe",
              },
            }}
          >
            <AccordionSummary expandIcon={<ExpandMore />}>
              <Box sx={{ display: "flex", gap: 2, alignItems: "center" }}>
                <SchemaIcon sx={{ color: "#8e44ad" }} />
                <Typography
                  draggable
                  onDragStart={(e) =>
                    e.dataTransfer.setData("text/plain", db.name)
                  }
                  onDoubleClick={() => onInsertAtQuery(db.name)}
                  sx={{
                    fontWeight: 500,
                    cursor: "grab",
                    fontFamily: "inherit",
                    "&:hover": {
                      textDecoration: "underline",
                      color: "#0473ea",
                    },
                    ...ellipsisText,
                  }}
                >
                  {db.name}
                </Typography>
              </Box>
            </AccordionSummary>

            <AccordionDetails>
              {db?.schemas?.map((schema, schemaIndex) => {
                const schemaKey = getSchemaKey(dbIndex, schemaIndex);
                const isSchemaExpanded = expandedSchemas.has(schemaKey);

                return (
                  <Accordion
                    key={schemaKey}
                    expanded={isSchemaExpanded}
                    onChange={() => handleToggleSchema(dbIndex, schemaIndex)}
                    sx={{
                      ml: 2,
                      borderRadius: 2,
                      backgroundColor: "#fdfdfd",
                      boxShadow: "inset 0 0 0 1px #e0e0e0",
                      mb: 1,
                      "& .MuiAccordionSummary-root:hover": {
                        backgroundColor: "#f2faff",
                      },
                    }}
                  >
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Box sx={{ display: "flex", gap: 2, alignItems: "center" }}>
                        <StorageIcon sx={{ color: "#27ae60" }} />
                        <Tooltip title={schema.name}>
                          <Typography
                            draggable
                            onDragStart={(e) =>
                              e.dataTransfer.setData(
                                "text/plain",
                                `${db.name}.${schema.name}`
                              )
                            }
                            onDoubleClick={() =>
                              onInsertAtQuery(`${db.name}.${schema.name}`)
                            }
                            sx={{
                              cursor: "grab",
                              fontFamily: "inherit",
                              "&:hover": {
                                textDecoration: "underline",
                                color: "#0473ea",
                              },
                              ...ellipsisText,
                            }}
                          >
                            {schema.name}
                          </Typography>
                        </Tooltip>
                      </Box>
                    </AccordionSummary>

                    <AccordionDetails>
                      {schema?.tableColumns?.map((table, tableIndex) => (
                        <Box key={tableIndex}>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              gap: 2,
                              ml: 4,
                              my: 0.5,
                            }}
                          >
                            <AbcIcon sx={{ color: "#2e86c1", fontSize: 20 }} />
                            <Tooltip title={table}>
                              <Typography
                                draggable
                                onDragStart={(e) =>
                                  e.dataTransfer.setData(
                                    "text/plain",
                                    `${db.name}.${schema.name}.${table}`
                                  )
                                }
                                onDoubleClick={() =>
                                  onInsertAtQuery(
                                    `${db.name}.${schema.name}.${table}`
                                  )
                                }
                                sx={{
                                  cursor: "grab",
                                  fontFamily: "inherit",
                                  "&:hover": {
                                    textDecoration: "underline",
                                    color: "#0473ea",
                                  },
                                  ...ellipsisText,
                                }}
                              >
                                {table}
                              </Typography>
                            </Tooltip>
                          </Box>
                        </Box>
                      ))}
                    </AccordionDetails>
                  </Accordion>
                );
              })}
            </AccordionDetails>
          </Accordion>
        );
      })}
    </Box>
  );
};

export default DatabaseTree;

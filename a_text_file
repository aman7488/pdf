import React, { useState, useEffect } from "react";
import {
  Box,
  Typography,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Collapse,
  IconButton,
  Tooltip,
  TextField,
  InputAdornment,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from "@mui/material";
import DashboardIcon from "@mui/icons-material/Dashboard";
import ExpandLess from "@mui/icons-material/ExpandLess";
import ExpandMore from "@mui/icons-material/ExpandMore";
import BarChartIcon from "@mui/icons-material/BarChart";
import PieChartIcon from "@mui/icons-material/PieChart";
import KeyboardArrowLeftIcon from "@mui/icons-material/KeyboardArrowLeft";
import ChevronRightIcon from "@mui/icons-material/ChevronRight";
import SearchIcon from "@mui/icons-material/Search";
import StorageIcon from "@mui/icons-material/Storage";
import SchemaIcon from "@mui/icons-material/Schema";
import AbcIcon from "@mui/icons-material/Abc";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../pages/Login/AuthContext";
import LogoutIcon from "@mui/icons-material/Logout";

const allBoxes = [
  { title: "FMO Trade Volume", image: "/db1.png", route: "/dashboard" },
  { title: "Settlement", image: "/db2.jpg", route: "/dashboard" },
  { title: "Margin Operations", image: "/db3.png", route: "/dashboard" },
  { title: "Middle Office", image: "/db1.png", route: "/dashboard" },
  { title: "Confirmation", image: "/db2.jpg", route: "/dashboard" },
  { title: "Reg Ops Volumetric", image: "/db3.png", route: "/dashboard" },
  { title: "GEMS", image: "/selfService.png", route: "/dashboard" },
];

const CombinedNavbarDatabase = ({ 
  dbStructure, 
  onInsertAtQuery, 
  sidebarWidth, 
  setSidebarWidth, 
  isResizing, 
  setIsResizing 
}) => {
  const [openDashboards, setOpenDashboards] = useState(true);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [expandedDBs, setExpandedDBs] = useState(new Set());
  const [expandedSchemas, setExpandedSchemas] = useState(new Set());
  
  const navigate = useNavigate();
  const userId = sessionStorage.getItem("user_id");
  const { logout } = useAuth();

  // Define consistent colors
  const colors = {
    primary: "#0473ea",
    secondary: "#38d200",
    background: "#ffffff",
    surface: "#f8faff",
    surfaceVariant: "#eaf3fc",
    onSurface: "#1a1a1a",
    onSurfaceVariant: "#6d6e70",
    border: "#e0e0e0",
    shadow: "rgba(0, 0, 0, 0.1)",
    hover: "#f5f5f5",
    accent: "#8e44ad",
    success: "#27ae60",
    info: "#2e86c1",
  };

  const ellipsisText = {
    flex: 1,
    minWidth: 0,
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
  };

  const getSchemaKey = (dbIndex, schemaIndex) => `${dbIndex}-${schemaIndex}`;

  const handleDashboardClick = () => setOpenDashboards(!openDashboards);
  const dashboardItems = allBoxes;

  const handleLogout = async () => {
    try {
      await logout();
    } catch (error) {
      console.log(error.message);
    }
  };

  const handleToggleDB = (dbIndex) => {
    setExpandedDBs((prev) => {
      const newSet = new Set(prev);
      newSet.has(dbIndex) ? newSet.delete(dbIndex) : newSet.add(dbIndex);
      return newSet;
    });
  };

  const handleToggleSchema = (dbIndex, schemaIndex) => {
    const key = getSchemaKey(dbIndex, schemaIndex);
    setExpandedSchemas((prev) => {
      const newSet = new Set(prev);
      newSet.has(key) ? newSet.delete(key) : newSet.add(key);
      return newSet;
    });
  };

  useEffect(() => {
    if (!searchTerm) {
      setExpandedDBs(new Set());
      setExpandedSchemas(new Set());
      return;
    }

    const dbs = new Set();
    const schemas = new Set();

    dbStructure.forEach((db, dbIndex) => {
      const dbMatch = db.name.toLowerCase().includes(searchTerm.toLowerCase());

      db.schemas.forEach((schema, schemaIndex) => {
        const schemaMatch = schema.name
          .toLowerCase()
          .includes(searchTerm.toLowerCase());
        const tableMatch = schema.tableColumns.some((table) =>
          table.toLowerCase().includes(searchTerm.toLowerCase())
        );

        if (schemaMatch || tableMatch) {
          schemas.add(getSchemaKey(dbIndex, schemaIndex));
        }
      });

      if (
        dbMatch ||
        [...schemas].some((key) => key.startsWith(`${dbIndex}-`))
      ) {
        dbs.add(dbIndex);
      }
    });

    setExpandedDBs(dbs);
    setExpandedSchemas(schemas);
  }, [searchTerm, dbStructure]);

  return (
    <Box
      sx={{
        display: "flex",
        flexDirection: "column",
        width: isCollapsed ? "80px" : sidebarWidth,
        transition: "width 0.3s ease",
        height: "100vh",
        boxShadow: `0 4px 12px ${colors.shadow}`,
        bgcolor: colors.background,
        position: "relative",
      }}
    >
      {/* Collapse/Expand Button */}
      <IconButton
        onClick={() => setIsCollapsed(!isCollapsed)}
        sx={{
          position: "absolute",
          top: 20,
          right: -20,
          bgcolor: colors.background,
          border: `1px solid ${colors.border}`,
          zIndex: 2000,
          borderRadius: "50%",
          boxShadow: `0 2px 8px ${colors.shadow}`,
          width: "40px",
          height: "40px",
          "&:hover": {
            backgroundColor: colors.hover,
          },
        }}
      >
        {isCollapsed ? <ChevronRightIcon /> : <KeyboardArrowLeftIcon />}
      </IconButton>

      {/* Scrollable Content Container */}
      <Box
        sx={{
          flex: 1,
          overflowY: "auto",
          overflowX: "hidden",
          scrollbarWidth: "thin",
          scrollbarColor: `${colors.border} transparent`,
          "&::-webkit-scrollbar": {
            width: "6px",
          },
          "&::-webkit-scrollbar-track": {
            background: "transparent",
          },
          "&::-webkit-scrollbar-thumb": {
            backgroundColor: colors.border,
            borderRadius: "3px",
            "&:hover": {
              backgroundColor: colors.onSurfaceVariant,
            },
          },
        }}
      >
        {/* Logo */}
        <Box
          sx={{
            width: "100%",
            height: "6vh",
            minHeight: "60px",
            margin: "5vh 0px 3vh 0",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
          }}
        >
          <img
            src="/STANC-logo.png"
            width={isCollapsed ? "50%" : "60%"}
            alt="logo"
            style={{ maxHeight: "50px", objectFit: "contain" }}
          />
        </Box>

        {/* User Info */}
        {!isCollapsed && (
          <Box
            sx={{
              display: "flex",
              alignItems: "center",
              minHeight: "7vh",
              width: "100%",
              bgcolor: colors.primary,
              px: 2,
              py: 1,
              mx: 0,
            }}
          >
            <Box
              sx={{
                display: "flex",
                alignItems: "center",
                gap: 1,
                width: "100%",
              }}
            >
              <Box
                component="img"
                src="avatar.png"
                alt="User Avatar"
                sx={{
                  width: "4vh",
                  height: "4vh",
                  minWidth: "32px",
                  minHeight: "32px",
                  borderRadius: "50%",
                  objectFit: "cover",
                  border: `2px solid ${colors.border}`,
                }}
              />
              <Typography
                variant="h6"
                sx={{
                  fontFamily: "Ekster Medium",
                  color: colors.background,
                  fontSize: "2vh",
                  minFontSize: "14px",
                  ml: 1,
                  ...ellipsisText,
                }}
              >
                Welcome <span style={{ color: colors.secondary }}>{userId}</span>
              </Typography>
            </Box>
          </Box>
        )}

        {/* Navigation Section */}
        <Box sx={{ mt: 2 }}>
          <List component="nav">
            {/* Dashboards */}
            <Tooltip
              title="Dashboards"
              placement="right"
              disableHoverListener={!isCollapsed}
            >
              <ListItem
                button
                onClick={handleDashboardClick}
                sx={{
                  position: "relative",
                  cursor: "pointer",
                  "&:hover": {
                    backgroundColor: colors.surfaceVariant,
                    "&::before": {
                      content: '""',
                      position: "absolute",
                      left: 0,
                      top: 5,
                      bottom: 5,
                      width: "6px",
                      backgroundColor: colors.primary,
                      borderTopRightRadius: "8px",
                      borderBottomRightRadius: "8px",
                    },
                  },
                }}
              >
                <ListItemIcon>
                  <DashboardIcon
                    sx={{ 
                      color: colors.secondary, 
                      width: "3.5vh", 
                      height: "3.5vh",
                      minWidth: "24px",
                      minHeight: "24px",
                    }}
                  />
                </ListItemIcon>
                {!isCollapsed && (
                  <ListItemText
                    primary="Dashboards"
                    primaryTypographyProps={{
                      fontFamily: "Ekster Medium",
                      fontSize: "2.4vh",
                      minFontSize: "16px",
                      color: colors.primary,
                      ml: "1vw",
                    }}
                  />
                )}
                {!isCollapsed && (
                  <Box sx={{ color: colors.primary }}>
                    {openDashboards ? <ExpandLess /> : <ExpandMore />}
                  </Box>
                )}
              </ListItem>
            </Tooltip>

            {/* Dashboard Items */}
            <Collapse
              in={openDashboards && !isCollapsed}
              timeout="auto"
              unmountOnExit
            >
              <List component="div" disablePadding sx={{ pl: 4 }}>
                {dashboardItems.map((item, index) => (
                  <ListItem
                    button
                    key={index}
                    onClick={() =>
                      navigate(item.route, { state: { title: item.title } })
                    }
                    sx={{
                      position: "relative",
                      cursor: "pointer",
                      "&:hover": {
                        backgroundColor: colors.surfaceVariant,
                        "&::before": {
                          content: '""',
                          position: "absolute",
                          left: 0,
                          top: 5,
                          bottom: 5,
                          width: "6px",
                          backgroundColor: colors.primary,
                          borderTopRightRadius: "8px",
                          borderBottomRightRadius: "8px",
                        },
                      },
                    }}
                  >
                    <ListItemIcon>
                      {index % 2 === 0 ? (
                        <BarChartIcon sx={{ color: colors.primary }} />
                      ) : (
                        <PieChartIcon sx={{ color: colors.primary }} />
                      )}
                    </ListItemIcon>
                    <ListItemText
                      primary={item.title}
                      primaryTypographyProps={{
                        fontFamily: "Ekster Medium",
                        fontSize: "2vh",
                        minFontSize: "14px",
                        color: colors.onSurfaceVariant,
                      }}
                    />
                  </ListItem>
                ))}
              </List>
            </Collapse>
          </List>
        </Box>

        {/* Database Tree Section */}
        {!isCollapsed && (
          <Box
            sx={{
              display: "flex",
              flexDirection: "column",
              mt: 2,
              mx: 2,
              mb: 2,
            }}
          >
            <Box
              sx={{
                p: 2,
                borderRadius: 2,
                backgroundColor: colors.surface,
                mb: 2,
              }}
            >
              <Typography
                variant="h6"
                sx={{
                  fontWeight: "bold",
                  color: colors.onSurface,
                  fontFamily: "Ekarta Medium, sans-serif",
                  mb: 2,
                  fontSize: "18px",
                }}
              >
                Databases
              </Typography>

              <TextField
                fullWidth
                variant="outlined"
                size="small"
                placeholder="Search DB, Schema, Table..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                InputProps={{
                  sx: {
                    borderRadius: 2,
                    backgroundColor: colors.background,
                    fontFamily: "inherit",
                    "& .MuiOutlinedInput-notchedOutline": {
                      borderColor: colors.border,
                    },
                    "&:hover .MuiOutlinedInput-notchedOutline": {
                      borderColor: colors.primary,
                    },
                    "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
                      borderColor: colors.primary,
                    },
                  },
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon sx={{ color: colors.onSurfaceVariant }} />
                    </InputAdornment>
                  ),
                }}
              />
            </Box>

            <Box>
              {dbStructure?.map((db, dbIndex) => {
                const isDBExpanded = expandedDBs.has(dbIndex);

                return (
                  <Accordion
                    key={dbIndex}
                    expanded={isDBExpanded}
                    onChange={() => handleToggleDB(dbIndex)}
                    sx={{
                      borderRadius: 2,
                      backgroundColor: colors.surface,
                      mb: 1,
                      "&:before": { display: "none" },
                      boxShadow: `0 1px 3px ${colors.shadow}`,
                      "& .MuiAccordionSummary-root": {
                        "&:hover": {
                          backgroundColor: colors.surfaceVariant,
                        },
                      },
                      "& .MuiAccordionSummary-expandIconWrapper": {
                        color: colors.primary,
                      },
                    }}
                  >
                    <AccordionSummary expandIcon={<ExpandMore />}>
                      <Box sx={{ display: "flex", gap: 2, alignItems: "center" }}>
                        <SchemaIcon sx={{ color: colors.accent }} />
                        <Typography
                          draggable
                          onDragStart={(e) =>
                            e.dataTransfer.setData("text/plain", db.name)
                          }
                          onDoubleClick={() => onInsertAtQuery(db.name)}
                          sx={{
                            fontWeight: 500,
                            cursor: "grab",
                            fontFamily: "inherit",
                            color: colors.onSurface,
                            "&:hover": {
                              textDecoration: "underline",
                              color: colors.primary,
                            },
                            ...ellipsisText,
                          }}
                        >
                          {db.name}
                        </Typography>
                      </Box>
                    </AccordionSummary>

                    <AccordionDetails>
                      {db?.schemas?.map((schema, schemaIndex) => {
                        const schemaKey = getSchemaKey(dbIndex, schemaIndex);
                        const isSchemaExpanded = expandedSchemas.has(schemaKey);

                        return (
                          <Accordion
                            key={schemaKey}
                            expanded={isSchemaExpanded}
                            onChange={() => handleToggleSchema(dbIndex, schemaIndex)}
                            sx={{
                              ml: 2,
                              borderRadius: 2,
                              backgroundColor: colors.background,
                              boxShadow: `inset 0 0 0 1px ${colors.border}`,
                              mb: 1,
                              "&:before": { display: "none" },
                              "& .MuiAccordionSummary-root": {
                                "&:hover": {
                                  backgroundColor: colors.hover,
                                },
                              },
                              "& .MuiAccordionSummary-expandIconWrapper": {
                                color: colors.primary,
                              },
                            }}
                          >
                            <AccordionSummary expandIcon={<ExpandMore />}>
                              <Box sx={{ display: "flex", gap: 2, alignItems: "center" }}>
                                <StorageIcon sx={{ color: colors.success }} />
                                <Tooltip title={schema.name}>
                                  <Typography
                                    draggable
                                    onDragStart={(e) =>
                                      e.dataTransfer.setData(
                                        "text/plain",
                                        `${db.name}.${schema.name}`
                                      )
                                    }
                                    onDoubleClick={() =>
                                      onInsertAtQuery(`${db.name}.${schema.name}`)
                                    }
                                    sx={{
                                      cursor: "grab",
                                      fontFamily: "inherit",
                                      color: colors.onSurface,
                                      "&:hover": {
                                        textDecoration: "underline",
                                        color: colors.primary,
                                      },
                                      ...ellipsisText,
                                    }}
                                  >
                                    {schema.name}
                                  </Typography>
                                </Tooltip>
                              </Box>
                            </AccordionSummary>

                            <AccordionDetails>
                              {schema?.tableColumns?.map((table, tableIndex) => (
                                <Box key={tableIndex}>
                                  <Box
                                    sx={{
                                      display: "flex",
                                      alignItems: "center",
                                      gap: 2,
                                      ml: 4,
                                      my: 0.5,
                                      py: 0.5,
                                      px: 1,
                                      borderRadius: 1,
                                      "&:hover": {
                                        backgroundColor: colors.hover,
                                      },
                                    }}
                                  >
                                    <AbcIcon sx={{ color: colors.info, fontSize: 20 }} />
                                    <Tooltip title={table}>
                                      <Typography
                                        draggable
                                        onDragStart={(e) =>
                                          e.dataTransfer.setData(
                                            "text/plain",
                                            `${db.name}.${schema.name}.${table}`
                                          )
                                        }
                                        onDoubleClick={() =>
                                          onInsertAtQuery(
                                            `${db.name}.${schema.name}.${table}`
                                          )
                                        }
                                        sx={{
                                          cursor: "grab",
                                          fontFamily: "inherit",
                                          color: colors.onSurface,
                                          "&:hover": {
                                            textDecoration: "underline",
                                            color: colors.primary,
                                          },
                                          ...ellipsisText,
                                        }}
                                      >
                                        {table}
                                      </Typography>
                                    </Tooltip>
                                  </Box>
                                </Box>
                              ))}
                            </AccordionDetails>
                          </Accordion>
                        );
                      })}
                    </AccordionDetails>
                  </Accordion>
                );
              })}
            </Box>
          </Box>
        )}

        {/* Logout Section */}
        <Box
          sx={{
            p: 2,
            borderTop: `1px solid ${colors.border}`,
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
            mt: "auto",
            backgroundColor: colors.background,
          }}
        >
          <Tooltip title="Logout" placement="right" disableHoverListener={!isCollapsed}>
            <IconButton
              onClick={handleLogout}
              sx={{
                color: colors.primary,
                "&:hover": { 
                  color: "#035ec2",
                  backgroundColor: colors.hover,
                },
              }}
            >
              <LogoutIcon
                sx={{
                  width: "4vh",
                  height: "4vh",
                  minWidth: "24px",
                  minHeight: "24px",
                }}
              />
            </IconButton>
          </Tooltip>
        </Box>
      </Box>
    </Box>
  );
};

export default CombinedNavbarDatabase;
